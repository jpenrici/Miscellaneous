<?xml version="1.0" encoding="UTF-8"?>
<snippets>
    <snippet group="CMake" trigger="Armadillo" id="" complement="find package" removed="false" modified="false">find_package(Armadillo REQUIRED)

include_directories(\\${ARMADILLO_INCLUDE_DIRS})

add_executable(\\${PROJECT_NAME} \\${SOURCES})

target_link_libraries(\\${PROJECT_NAME} PUBLIC \\${ARMADILLO_LIBRARIES})</snippet>
    <snippet group="CMake" trigger="cereal" id="" complement="find package" removed="false" modified="false">find_package(cereal REQUIRED)

add_executable(\\${PROJECT_NAME} \\${SOURCES})

target_link_libraries(\\${PROJECT_NAME} PUBLIC cereal::cereal)</snippet>
    <snippet group="CMake" trigger="Eigen" id="" complement="find package" removed="false" modified="false">find_package (Eigen3 3.3 REQUIRED NO_MODULE)

add_executable(\\${PROJECT_NAME} \\${SOURCES})

target_link_libraries(\\${PROJECT_NAME} PUBLIC Eigen3::Eigen)</snippet>
    <snippet group="CMake" trigger="ensmallen" id="" complement="find package" removed="false" modified="false">find_package(Armadillo REQUIRED)
find_package(ensmallen REQUIRED)

include_directories(\\${ARMADILLO_INCLUDE_DIRS})

add_executable(\\${PROJECT_NAME} \\${SOURCES})

target_link_libraries(\\${PROJECT_NAME} PUBLIC \\${ARMADILLO_LIBRARIES})</snippet>
    <snippet group="CMake" trigger="GTKmm" id="" complement="" removed="false" modified="false">cmake_minimum_required(VERSION $3.5$)

project($PROJ-NAME$ LANGUAGES CXX)

set(CMAKE_CXX_STANDARD $20$)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(SOURCES
    main.cpp
    $file.h$ $file.cpp$
)

find_package(PkgConfig REQUIRED)
pkg_check_modules(GTKMM REQUIRED gtkmm-$3.0$)

add_executable(\\${PROJECT_NAME} \\${SOURCES})

link_directories(\\${GTKMM_LIBRARY_DIRS})
include_directories(include \\${GTKMM_INCLUDE_DIRS})

target_link_libraries (
    \\${PROJECT_NAME} PRIVATE
    \\${GTKMM_LIBRARIES}
)

install(TARGETS \\${PROJECT_NAME}
    LIBRARY DESTINATION \\${CMAKE_INSTALL_LIBDIR})</snippet>
    <snippet group="CMake" trigger="mlpack" id="" complement="find package" removed="false" modified="false">find_package(Armadillo REQUIRED)

include_directories(\\${ARMADILLO_INCLUDE_DIRS})
include_directories(\\${MLPACK_INCLUDE_DIRS})

add_executable(\\${PROJECT_NAME} \\${SOURCES})

target_link_libraries(\\${PROJECT_NAME} PUBLIC \\${MLPACK_LIBRARY})</snippet>
    <snippet group="CMake" trigger="OpenCV" id="" complement="find package" removed="false" modified="false">find_package(OpenCV REQUIRED)

include_directories(\\${OpenCV_INCLUDE_DIRS})

add_executable(\\${PROJECT_NAME} \\${SOURCES})

target_link_libraries(\\${PROJECT_NAME} PUBLIC \\${OpenCV_LIBS})</snippet>
    <snippet group="CMake" trigger="OpenGL" id="" complement="glfw3" removed="false" modified="false">cmake_minimum_required(VERSION $3.5$)

project($PROJ-NAME$ LANGUAGES CXX)

set(CMAKE_CXX_STANDARD $20$)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(SOURCES
    main.cpp
    $filename.h$ $filename.cpp$
)

add_executable(
    \\${PROJECT_NAME}
    \\${SOURCES}
)

find_package(OpenGL REQUIRED COMPONENTS OpenGL)
find_package(glfw3 REQUIRED)

include_directories(\\${OPENGL_INCLUDE_DIRS})

target_link_libraries (
    \\${PROJECT_NAME} PUBLIC
    \\${OPENGL_LIBRARIES}
    glfw
)

install(TARGETS \\${PROJECT_NAME}
    LIBRARY DESTINATION \\${CMAKE_INSTALL_LIBDIR})</snippet>
    <snippet group="CMake" trigger="OpenGL" id="" complement="glut, glew, glfw3, glm" removed="false" modified="false">cmake_minimum_required(VERSION $3.5$)

project($PROJ-NAME$ LANGUAGES CXX)

set(CMAKE_CXX_STANDARD $20$)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(SOURCES
    main.cpp
    $filename.h$ $filename.cpp$
)

set(RESOURCE_FILES
    $path$
    # font/font.ttf
    # images/image.png
)

add_executable(
    \\${PROJECT_NAME}
    \\${SOURCES}
)

find_package(OpenGL REQUIRED COMPONENTS OpenGL)
find_package(GLUT REQUIRED)
find_package(GLEW REQUIRED)
find_package(glfw3 REQUIRED)
find_package(glm REQUIRED)

include_directories(
    \\${OPENGL_INCLUDE_DIRS}
    \\${GLUT_INCLUDE_DIRS}
    \\${GLEW_INCLUDE_DIRS}
)

target_link_libraries (
    \\${PROJECT_NAME} PUBLIC
    \\${OPENGL_LIBRARIES}
    \\${GLUT_LIBRARIES}
    \\${GLEW_LIBRARIES}
    glfw
    glm::glm
)

file(COPY \\${RESOURCE_FILES} DESTINATION \\${CMAKE_BINARY_DIR}/$Resources$)

install(TARGETS \\${PROJECT_NAME}
    LIBRARY DESTINATION \\${CMAKE_INSTALL_LIBDIR})</snippet>
    <snippet group="CMake" trigger="SDL" id="" complement="" removed="false" modified="false">cmake_minimum_required(VERSION $3.5$)

project($PROJ-NAME$ LANGUAGES CXX)

set(CMAKE_CXX_STANDARD $20$)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(SOURCES
    main.cpp
    $game.h$ $game.cpp$
)

set(RESOURCE_FILES
    $path$
    # font/font.ttf
    # images/image.png
)

add_executable(
    \\${PROJECT_NAME}
    \\${SOURCES}
)

find_package(SDL2 REQUIRED)
find_package(SDL2_ttf REQUIRED)

include_directories(
    \\${SDL2_INCLUDE_DIRS}
    \\${SDL2_ttf_INCLUDE_DIRS}
)

target_link_libraries (
    \\${PROJECT_NAME} PUBLIC
    SDL2::SDL2
    SDL2_ttf::SDL2_ttf
)

file(COPY \\${RESOURCE_FILES} DESTINATION \\${CMAKE_BINARY_DIR}/$Resources$)

install(TARGETS \\${PROJECT_NAME}
    LIBRARY DESTINATION \\${CMAKE_INSTALL_LIBDIR})</snippet>
    <snippet group="CMake" trigger="SDL" id="" complement="find package" removed="false" modified="false">find_package(SDL2 REQUIRED)
find_package(SDL2_ttf REQUIRED)

include_directories(
    \\${SDL2_INCLUDE_DIRS}
    \\${SDL2_ttf_INCLUDE_DIRS}
)

target_link_libraries (
    \\${PROJECT_NAME} PUBLIC
    SDL2::SDL2
    SDL2_ttf::SDL2_ttf
)</snippet>
    <snippet group="CMake" trigger="set" id="" complement="glob sources" removed="false" modified="false">file(GLOB SOURCES
    &quot;*.h&quot;
    &quot;*.cpp&quot;
)

file(GLOB RESOURCE_FILES
    &quot;../../resources/fonts/*.ttf&quot;
    &quot;../../resources/images/*.png&quot;
)

add_executable(
    \\${PROJECT_NAME}
    \\${SOURCES}
)

file(COPY \\${RESOURCE_FILES} DESTINATION \\${CMAKE_BINARY_DIR}/$Resources$)</snippet>
    <snippet group="CMake" trigger="set" id="" complement="resources" removed="false" modified="false">set(RESOURCE_FILES
    $path$
    # font/font.ttf
    # images/image.png
)

file(COPY \\${RESOURCE_FILES} DESTINATION \\${CMAKE_BINARY_DIR}/$Resources$)</snippet>
    <snippet group="CMake" trigger="set" id="" complement="sources" removed="false" modified="false">set(SOURCES
    main.cpp
    $file.h$ $file.cpp$
)

add_executable(
    \\${PROJECT_NAME}
    \\${SOURCES}
)</snippet>
    <snippet group="CMake" trigger="SFML" id="" complement="" removed="false" modified="false">cmake_minimum_required(VERSION $3.5$)

project($PROJ-NAME$ LANGUAGES CXX)

set(CMAKE_CXX_STANDARD $20$)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(SOURCES
    main.cpp
    $game.h$ $game.cpp$
)

set(RESOURCE_FILES
    $path$
    # font/font.ttf
    # images/image.png
)

add_executable(
    \\${PROJECT_NAME}
    \\${SOURCES}
)

find_package (SFML $2.5$ COMPONENTS audio graphics network system window REQUIRED)

target_link_libraries (
    \\${PROJECT_NAME} PUBLIC
    sfml-audio
    sfml-graphics
    sfml-network
    sfml-system
    sfml-window
)

file(COPY \\${RESOURCE_FILES} DESTINATION \\${CMAKE_BINARY_DIR}/$Resources$)

install(TARGETS \\${PROJECT_NAME}
    LIBRARY DESTINATION \\${CMAKE_INSTALL_LIBDIR})</snippet>
    <snippet group="CMake" trigger="SFML" id="" complement="find package" removed="false" modified="false">find_package (SFML $2.5$ COMPONENTS audio graphics network system window REQUIRED)

target_link_libraries (
    \\${PROJECT_NAME} PUBLIC
    sfml-audio
    sfml-graphics
    sfml-network
    sfml-system
    sfml-window
)</snippet>
    <snippet group="CMake" trigger="wxWidgets" id="" complement="" removed="false" modified="false">cmake_minimum_required(VERSION $3.5$)

project($PROJ-NAME$ LANGUAGES CXX)

set(CMAKE_CXX_STANDARD $17$)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(SOURCES
    main.cpp
    #$file.h$ $file.cpp$
)

# WXWIN : Environment variable configured in Windows for the wxWidgets library.
if (WIN32)
    set(wxWidgets_ROOT_DIR \\$ENV{$WXWIN$})
    set(wxWidgets_LIB_DIR  \\$ENV{$WXWIN$}/lib/$vc_x64_lib$)
    set(wxWidgets_USE_LIBS ON)
endif()

find_package(wxWidgets REQUIRED COMPONENTS net core base)

if (wxWidgets_FOUND)
    include(\\${wxWidgets_USE_FILE})

    message(&quot;S.O. : &quot; \\${CMAKE_SYSTEM_NAME})
    if (WIN32)
        message(&quot;Root Dir: &quot; \\${wxWidgets_ROOT_DIR} )
        message(&quot;Lib dir : &quot; \\${wxWidgets_LIB_DIR} )
    else(LINUX)
        message(&quot;wxWidgets package found!&quot;)
    endif()

    add_executable(\\${PROJECT_NAME} \\${SOURCES})

    target_link_libraries (\\${PROJECT_NAME} PUBLIC \\${wxWidgets_LIBRARIES})

    install(TARGETS \\${PROJECT_NAME} LIBRARY DESTINATION \\${CMAKE_INSTALL_LIBDIR})
    message(&quot;Cmake completed successfully!&quot;)
else()
    message(FATAL_ERROR &quot;wxWidgets not found!&quot;)
endif()</snippet>
    <snippet group="C++" trigger="auto" id="" complement="function" removed="false" modified="false">auto $function$ () -&gt; $type$
{
    $$ 

    return $value$;
}</snippet>
    <snippet group="C++" trigger="class" id="cpp_genericclass" complement="" removed="false" modified="true">class $name$ {
    
public:
    
    $name$() {}
};</snippet>
    <snippet group="C++" trigger="class" id="" complement="inheritance" removed="false" modified="false">class $name$ : public $Base$ {

public:

    $name$() {}
    virtual ~$name$() {}

};</snippet>
    <snippet group="C++" trigger="class" id="cpp_classtemplate" complement="template" removed="false" modified="true">template &lt;typename $T$&gt;
class $name$ {
public:
    
    $name$() {}
};</snippet>
    <snippet group="C++" trigger="cout" id="" complement="'\n'" removed="false" modified="false">cout &lt;&lt; $value$ &lt;&lt; '\\n';</snippet>
    <snippet group="C++" trigger="cout" id="" complement="'\n' - std::cout" removed="false" modified="false">std::cout &lt;&lt; $value$ &lt;&lt; '\\n';</snippet>
    <snippet group="C++" trigger="cout" id="" complement="string" removed="false" modified="false">cout &lt;&lt; &quot;$value$&quot; &lt;&lt; endl;</snippet>
    <snippet group="C++" trigger="cout" id="" complement="string - std::cout" removed="false" modified="false">std::cout &lt;&lt; &quot;$value$&quot; &lt;&lt; std::endl;</snippet>
    <snippet group="C++" trigger="cout" id="" complement="value" removed="false" modified="false">cout &lt;&lt; $value$ &lt;&lt; endl;</snippet>
    <snippet group="C++" trigger="cout" id="" complement="value - std::cout" removed="false" modified="false">std::cout &lt;&lt; $value$ &lt;&lt; std::endl;</snippet>
    <snippet group="C++" trigger="for" id="" complement="" removed="false" modified="false">for ($int$ $i$ = 0; $i$ &lt; $value$; ++$i$) {
    $$
}</snippet>
    <snippet group="C++" trigger="for" id="" complement="double" removed="false" modified="false">for ($int$ $i$ = 0; $i$ &lt; $value1$; ++$i$) {
    for ($int$ $j$ = 0; $j$ &lt; $value2$; ++$j$) {
        $$
    }
}</snippet>
    <snippet group="C++" trigger="for" id="cpp_for" complement="vector" removed="false" modified="true">for (const auto&amp; $var$ : $container$) {
    $$
}</snippet>
    <snippet group="C++" trigger="GLFW" id="" complement="check compile" removed="false" modified="false">int $success$;
char $infoLog$[$size$];

$glGetShaderiv$($nameShader$, GL_COMPILE_STATUS, &amp;$success$);
if (!$success$) {
    glGetShaderInfoLog($nameShader$, $size$, NULL, $infoLog$);
    std::cout &lt;&lt; &quot;Error: &quot; &lt;&lt; $infoLog$ &lt;&lt; std::endl;
}</snippet>
    <snippet group="C++" trigger="GLFW" id="" complement="glad" removed="false" modified="false">// Glad, include glad *before* glfw
// #include &lt;glad/glad.h&gt;

if(!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress)) {
    std::cout &lt;&lt; &quot;Failed to initialize GLAD&quot; &lt;&lt; std::endl;
    return EXIT_FAILURE;
}</snippet>
    <snippet group="C++" trigger="GLFW" id="" complement="main" removed="false" modified="false">glfwInit();

glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, $4$);
glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, $6$);
glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
#ifdef __APPLE__
    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);
#endif
    
//glfwWindowHint(GLFW_RESIZABLE, GL_FALSE);    

GLFWwindow* $window$ = glfwCreateWindow($width$, $height$, &quot;$title$&quot;, NULL, NULL);
if ($window$ == NULL) {
    std::cout &lt;&lt; &quot;Failed to create GLFW window!&quot; &lt;&lt; std::endl;
    glfwTerminate();
    return EXIT_FAILURE;
}

glfwMakeContextCurrent($window$);

// insert code to use Opengl loading library

while(!glfwWindowShouldClose($window$))
{
    if (glfwGetKey($window$, GLFW_KEY_ESCAPE) == GLFW_PRESS) {
        glfwSetWindowShouldClose($window$, true);
    }
    glfwSwapBuffers($window$);
    glfwPollEvents();
}

glfwTerminate();</snippet>
    <snippet group="C++" trigger="GLFW" id="" complement="shader" removed="false" modified="false">// $Name$ Shader
GLuint $nameShader$;
$nameShader$ = glCreateShader($GL_VERTEX_SHADER$);
glShaderSource($nameShader$, $1$, &amp;$nameShaderSource$, NULL);
glCompileShader($nameShader$);</snippet>
    <snippet group="C++" trigger="GLFW" id="" complement="shader program" removed="false" modified="false">// Shader program
GLuint $shaderProgram$;
$shaderProgram$ = glCreateProgram();

glAttachShader($shaderProgram$, $vertexShader$);
glAttachShader($shaderProgram$, $fragmentShader$);
glLinkProgram($shaderProgram$);

glDeleteShader($vertexShader$);
glDeleteShader($fragmentShader$);</snippet>
    <snippet group="C++" trigger="GLFW" id="" complement="VAO, VBO" removed="false" modified="false">GLuint $VBO$; // Vertex Buffer Object (VBO)
GLuint $VAO$; // Vertex Array Object (VAO)
glGenVertexArrays($number$, &amp;$VAO$);
glGenBuffers($number$, &amp;$VBO$);
glBindVertexArray($VAO$);
glBindBuffer(GL_ARRAY_BUFFER, $VBO$);
glBufferData(GL_ARRAY_BUFFER, sizeof($vertices$), $vertices$, $GL_STATIC_DRAW$);
</snippet>
    <snippet group="C++" trigger="main" id="cpp_main" complement="" removed="false" modified="true">int main(int argc, char *argv[])
{
    $$
            
    return 0;
}
</snippet>
    <snippet group="C++" trigger="main" id="" complement="auto" removed="false" modified="false">auto main(int argc, char *argv[]) -&gt; int
{
    $$
    
    return 0;
}</snippet>
    <snippet group="C++" trigger="main" id="" complement="auto" removed="false" modified="false">auto main() -&gt; int
{
    $$

    return 0;
}</snippet>
    <snippet group="C++" trigger="main" id="" complement="basic includes" removed="false" modified="false">#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

int main()
{
    $$
            
    return 0;
}</snippet>
    <snippet group="C++" trigger="main" id="" complement="GTKmm" removed="false" modified="false">int main(int argc, char *argv[])
{
    auto app = Gtk::Application::create(argc, argv, &quot;$org.appName.com$&quot;);
    
    $Name Class$ $window$;
    
    return app-&gt;run($window$);
}</snippet>
    <snippet group="C++" trigger="main" id="" complement="simple" removed="false" modified="false">int main()
{
    $$
            
    return 0;
}</snippet>
    <snippet group="C++" trigger="OpenGL" id="" complement="info" removed="false" modified="false">std::cout &lt;&lt; &quot;Company:&quot; &lt;&lt; glGetString(GL_VENDOR) &lt;&lt; std::endl;
std::cout &lt;&lt; &quot;Model:&quot; &lt;&lt; glGetString(GL_RENDERER) &lt;&lt; std::endl;
std::cout &lt;&lt; &quot;OpenGL:&quot; &lt;&lt; glGetString(GL_VERSION) &lt;&lt; std::endl;</snippet>
    <snippet group="C++" trigger="SDL" id="" complement="Events" removed="false" modified="false">// Events
SDL_Event $event$;

// Process Input
while (SDL_PollEvent(&amp;$event$) != 0) {
    if($event$.type == SDL_QUIT)
    {
        // TO DO
    }
    else if($event$.type == SDL_KEYDOWN)
    {
        switch($event$.key.keysym.sym)
        {
            case SDLK_UP:
                // TO DO
                break;
            case SDLK_DOWN:
                // TO DO
                break;
            case SDLK_LEFT:
                // TO DO
                break;
            case SDLK_RIGHT:
                // TO DO
                break;
            default:
                // TO DO
                break;  
        }   
    }
}</snippet>
    <snippet group="C++" trigger="SDL" id="" complement="Font" removed="false" modified="false">TTF_Font *$pFont$ = 0;
SDL_Texture *$pText_Texture$ = 0;
SDL_Surface *$pFontSurface$ = 0;

if (TTF_Init() &gt;= 0) {
    $pFont$ = TTF_OpenFont(&quot;$Resources/font.ttf$&quot;, $size$);
}

if ($pFont$ != NULL) {
    SDL_Color $color$ = { $R$, $G$, $B$ };
    $pFontSurface$ = TTF_RenderText_Solid($pFont$, &quot;$text$&quot;, $color$);
    if ($pFontSurface$ != NULL) {
        $pText_Texture$ = SDL_CreateTextureFromSurface($pRenderer$, $pFontSurface$);
    }
    if ($pText_Texture$ != NULL) {
        SDL_Rect $dest$ = {$x$, $y$, $pFontSurface$-&gt;w, $pFontSurface$-&gt;h};
        SDL_RenderCopy($pRenderer$, $pText_Texture$, NULL, &amp;$dest$);
    }
}</snippet>
    <snippet group="C++" trigger="SDL" id="" complement="Init" removed="false" modified="false">//#include &lt;SDL2/SDL.h&gt;

SDL_Window* $pWindow$ = 0;
SDL_Renderer* $pRenderer$ = 0;

if (SDL_Init(SDL_INIT_EVERYTHING) &lt; 0) {
    std::cout &lt;&lt; &quot;Failed to initialize SDL!\\n&quot;;
    exit(EXIT_FAILURE);
}

$pWindow$ = SDL_CreateWindow(&quot;$title$&quot;, SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED,
                           $screen_width$, $screen_height$, SDL_WINDOW_SHOWN);
if ($pWindow$ == NULL) {
    std::cout &lt;&lt; &quot;Failed to create window!\\n&quot;;
    exit(EXIT_FAILURE);
}

$pRenderer$ =  SDL_CreateRenderer($pWindow$, -1, 0);
if ($pRenderer$ == NULL) {
    std::cout &lt;&lt; &quot;Failed to create render!\\n&quot;;
    exit(EXIT_FAILURE);
}</snippet>
    <snippet group="C++" trigger="SDL" id="" complement="Rect" removed="false" modified="false">SDL_Rect $rect$ = {$x$, $y$, $width$, $height$};
SDL_SetRenderDrawColor($pRenderer$, $R$, $G$, $B$, $A$);
SDL_RenderFillRect($pRenderer$, &amp;$rect$);</snippet>
    <snippet group="C++" trigger="SDL" id="" complement="Render" removed="false" modified="false">// Render
SDL_SetRenderDrawColor($pRenderer$, $R$, $G$, $B$, $A$);
SDL_RenderClear($pRenderer$);

// TO DO

SDL_RenderPresent($pRenderer$);

// Wait
SDL_Delay($milliseconds$);</snippet>
    <snippet group="C++" trigger="SDL" id="" complement="Terminate" removed="false" modified="false">// Terminate
TTF_CloseFont($pFont$);
TTF_Quit();
$pFont$ = NULL;

SDL_FreeSurface($pSurface$);
$pSurface$ = NULL;

SDL_DestroyTexture($pTexture$);
$pTexture$ = NULL;

SDL_DestroyRenderer($pRenderer$);
$pRenderer$ = NULL;

SDL_DestroyWindow($pWindow$);
$pWindow$ = NULL;

SDL_Quit();</snippet>
    <snippet group="C++" trigger="SFML" id="" complement="Event" removed="false" modified="false">sf::Event $event$;

while($window$.pollEvent($event$)) {
    if ($event$.type == sf::Event::Closed)
        $window$.close();
}</snippet>
    <snippet group="C++" trigger="SFML" id="" complement="Font" removed="false" modified="false">sf::Font $font$;
$font$.loadFromFile(&quot;$Resources/filename.ttf$&quot;);</snippet>
    <snippet group="C++" trigger="SFML" id="" complement="Font and Text" removed="false" modified="false">sf::Font $font$;
$font$.loadFromFile(&quot;$Resources/filename.ttf$&quot;);

sf::Text $text$;
$text$.setFont($font$);
$text$.setString(&quot;$string$&quot;);
$text$.setPosition($x$, $y$);
$text$.setCharacterSize($size$);
$text$.setFillColor(sf::Color::$White$);
$text$.setOutlineThickness($thickness$);</snippet>
    <snippet group="C++" trigger="SFML" id="" complement="Keyboard" removed="false" modified="false">if ($event$.type == sf::Event::$KeyPressed$) {
    if ($event$.key.code == sf::Keyboard::$Escape$) {
        
    }
}</snippet>
    <snippet group="C++" trigger="SFML" id="" complement="Keyboard" removed="false" modified="false">if (sf::Keyboard::isKeyPressed(sf::Keyboard::$key$)) {
    
}</snippet>
    <snippet group="C++" trigger="SFML" id="" complement="loop" removed="false" modified="false">while($window$.isOpen()) {

    $window$.clear(sf::Color(sf::Color::White));
    $$ // draw
    $window$.display();
}</snippet>
    <snippet group="C++" trigger="SFML" id="" complement="loop" removed="false" modified="false">while($window$.isOpen()) {
    $$
}</snippet>
    <snippet group="C++" trigger="SFML" id="" complement="loop" removed="false" modified="false">while($window$.isOpen()) {

    sf::Event $event$;
    while($window$.pollEvent($event$)) {
        if (($event$.type == sf::Event::Closed) ||
                ($event$.type == sf::Event::KeyPressed &amp;&amp;
                 $event$.key.code == sf::Keyboard::Escape))
            $window$.close();
    }

    $window$.clear(sf::Color(sf::Color::White));
    $$ // draw
    $window$.display();
}</snippet>
    <snippet group="C++" trigger="SFML" id="" complement="Mouse" removed="false" modified="false">if (sf::Mouse::isButtonPressed(sf::Mouse::$Left$))) {
    
}</snippet>
    <snippet group="C++" trigger="SFML" id="" complement="RenderWindow" removed="false" modified="false">sf::RenderWindow $window$(sf::VideoMode($width$, $height$),
                          &quot;$title$&quot;, sf::Style::Titlebar | sf::Style::Close);</snippet>
    <snippet group="C++" trigger="SFML" id="" complement="Shape Circle" removed="false" modified="false">sf::CircleShape $circle$($radius$);
$circle$.setFillColor(sf::Color::$White$);
$circle$.setPosition($x$, $y$);
$circle$.setOrigin(sf::Vector2f(circle.getRadius(), circle.getRadius()));</snippet>
    <snippet group="C++" trigger="SFML" id="" complement="Shape Rectangle" removed="false" modified="false">sf::RectangleShape $rect$(sf::Vector2f($width$, $height$));
$rect$.setFillColor(sf::Color::$White$);
$rect$.setPosition($x$, $y$);
$rect$.setOrigin(sf::Vector2f($rect$.getSize().x / 2, $rect$.getSize().y / 2));</snippet>
    <snippet group="C++" trigger="SFML" id="" complement="Text" removed="false" modified="false">sf::Text $text$;
$text$.setFont($font$);
$text$.setString(&quot;$string$&quot;);
$text$.setPosition($x$, $y$);
$text$.setCharacterSize($size$);
$text$.setFillColor(sf::Color::$White$);
$text$.setOutlineThickness($thickness$);</snippet>
    <snippet group="C++" trigger="SFML" id="" complement="Window position" removed="false" modified="false">$window$.setPosition(sf::Vector2i($x$, $y$));</snippet>
    <snippet group="C++" trigger="SFML" id="" complement="Window resolution" removed="false" modified="false">sf::Vector2f $resolution$;
$resolution$.x = sf::VideoMode::getDesktopMode().width;
$resolution$.y = sf::VideoMode::getDesktopMode().height;</snippet>
    <snippet group="C++" trigger="wxWidgets" id="" complement="basic" removed="false" modified="false">#include &lt;wx/wxprec.h&gt;

#ifndef WX_PRECOMP
#include &lt;wx/wx.h&gt;
#endif

class $App$ : public wxApp {

public:
    bool OnInit() override;

};

class $Frame$ : public wxFrame {

public:
    $Frame$(const wxString&amp; $title$);

};

bool $App$::OnInit()
{
    $Frame$ *$simple$ = new Frame(wxT(&quot;$Hello World$&quot;));
    $simple$-&gt;Show(true);

    return true;
}

$Frame$::$Frame$(const wxString&amp; $title$)
    : wxFrame(NULL, wxID_ANY, $title$, wxDefaultPosition, wxSize($250$, $150$))
{
    // To do
}

// Main
wxIMPLEMENT_APP($App$);</snippet>
    <snippet group="C++" trigger="wxWidgets" id="" complement="hello world" removed="false" modified="false">#include &lt;wx/wxprec.h&gt;

#ifndef WX_PRECOMP
#include &lt;wx/wx.h&gt;
#endif

#include &lt;iostream&gt;

class $Frame$ : public wxFrame
{
public:
    $Frame$(const wxString&amp; $title$)
        : wxFrame(NULL, wxID_ANY, $title$, wxDefaultPosition, wxSize($250$, $150$))
    {
        Centre();
    }
};

class $App$ : public wxApp
{
public:
    bool OnInit()
    {
        $Frame$ *$simple$ = new Frame(wxT(&quot;$Hello World$&quot;));
        $simple$-&gt;Show(true);

        return true;
    }
};

//////////////////////
// Using Main method!
//////////////////////

IMPLEMENT_APP_NO_MAIN($App$)

int main(int argc, char *argv[])
{
    wxApp *$pApp$ = new $App$();
    $App$::SetInstance($pApp$);

    if ($pApp$ != nullptr) {
        wxEntryStart(argc, argv);
        wxTheApp-&gt;CallOnInit();
        wxTheApp-&gt;OnRun();
        wxEntryCleanup();
    }
    else {
        std::cerr &lt;&lt; &quot;There was something wrong\\n&quot;;
    }

    return 0;
}
</snippet>
    <snippet group="C++" trigger="wxWidgets" id="" complement="IMPLEMENT_APP_NO_MAIN" removed="false" modified="false">#include &lt;iostream&gt;

IMPLEMENT_APP_NO_MAIN($App$)

int main(int argc, char *argv[])
{
    wxApp *$pApp$ = new $App$();
    $App$::SetInstance($pApp$);

    if ($pApp$ != nullptr) {
        wxEntryStart(argc, argv);
        wxTheApp-&gt;CallOnInit();
        wxTheApp-&gt;OnRun();
        wxEntryCleanup();
    }
    else {
        std::cerr &lt;&lt; &quot;There was something wrong\\n&quot;;
    }

    return 0;
}</snippet>
</snippets>
